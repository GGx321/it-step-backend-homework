const pool = require('./db');

// =====================================================
// –ó–∞–≤–¥–∞–Ω–Ω—è 1: –í–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω —É –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ
// =====================================================

async function getUserNamesUpper() {
    try {
        const query = 'SELECT UPPER(name) AS username FROM users';
        const result = await pool.query(query);
        
        const usernames = result.rows.map(row => row.username);
        
        console.log('\nüìù –ó–∞–≤–¥–∞–Ω–Ω—è 1: –Ü–º–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ');
        console.log('=====================================');
        console.log(usernames);
        
        return usernames;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error.message);
    }
}

// =====================================================
// –ó–∞–≤–¥–∞–Ω–Ω—è 2: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –ª—ñ—Ç–µ—Ä–æ—é "a" –≤ email
// =====================================================

async function findUsersWithA() {
    try {
        const query = `
            SELECT name, email 
            FROM users 
            WHERE email LIKE '%a%'
            ORDER BY name
        `;
        const result = await pool.query(query);
        
        console.log('\nüìß –ó–∞–≤–¥–∞–Ω–Ω—è 2: Email –º—ñ—Å—Ç–∏—Ç—å –ª—ñ—Ç–µ—Ä—É "a"');
        console.log('=====================================');
        
        result.rows.forEach(user => {
            console.log(`${user.name} ‚Äî ${user.email}`);
        });
        
        return result.rows;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error.message);
    }
}

// =====================================================
// –ó–∞–≤–¥–∞–Ω–Ω—è 3: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ –¥–æ–º–µ–Ω–∞—Ö
// =====================================================

async function countByDomain() {
    try {
        const query = `
            SELECT 
                SPLIT_PART(email, '@', 2) AS domain, 
                COUNT(*) AS count
            FROM users 
            GROUP BY domain
            ORDER BY count DESC, domain
        `;
        const result = await pool.query(query);
        
        console.log('\nüåê –ó–∞–≤–¥–∞–Ω–Ω—è 3: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ –¥–æ–º–µ–Ω–∞—Ö');
        console.log('=====================================');
        
        result.rows.forEach(row => {
            console.log(`${row.domain} ‚Äî ${row.count}`);
        });
        
        return result.rows;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error.message);
    }
}

// =====================================================
// –ó–∞–≤–¥–∞–Ω–Ω—è 4: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
// =====================================================

async function getUsersOrdered() {
    try {
        const query = `
            SELECT 
                name, 
                email, 
                TO_CHAR(created_at, 'YYYY-MM-DD HH24:MI:SS') AS created_at
            FROM users 
            ORDER BY created_at ASC
        `;
        const result = await pool.query(query);
        
        console.log('\nüìÖ –ó–∞–≤–¥–∞–Ω–Ω—è 4: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è');
        console.log('================================================');
        
        result.rows.forEach(user => {
            console.log({
                name: user.name,
                email: user.email,
                created_at: user.created_at
            });
        });
        
        return result.rows;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error.message);
    }
}

// =====================================================
// –ó–∞–≤–¥–∞–Ω–Ω—è 5: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∑–∞ email
// =====================================================

async function renameUserByEmail(email, newName) {
    try {
        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        const checkQuery = 'SELECT * FROM users WHERE email = $1';
        const checkResult = await pool.query(checkQuery, [email]);
        
        if (checkResult.rows.length === 0) {
            console.log(`\n‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ email "${email}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            return null;
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º'—è
        const updateQuery = `
            UPDATE users 
            SET name = $1 
            WHERE email = $2 
            RETURNING *
        `;
        const updateResult = await pool.query(updateQuery, [newName, email]);
        
        console.log(`\n‚úÖ –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ:`);
        console.log(`   Email: ${email}`);
        console.log(`   –ù–æ–≤–µ —ñ–º'—è: ${newName}`);
        
        return updateResult.rows[0];
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error.message);
    }
}

// =====================================================
// –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ—Ä–∏—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// =====================================================

async function showAllUsers() {
    try {
        const query = 'SELECT * FROM users ORDER BY id';
        const result = await pool.query(query);
        
        console.log('\nüë• –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');
        console.log('================================');
        console.table(result.rows);
        
        return result.rows;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error.message);
    }
}

async function resetDatabase() {
    try {
        // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
        await pool.query('DELETE FROM users');
        
        // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        const insertQuery = `
            INSERT INTO users (name, email) VALUES
                ('Alice', 'alice@example.com'),
                ('Bob', 'bob@gmail.com'),
                ('Charlie', 'charlie@example.com'),
                ('David', 'david@yahoo.com'),
                ('Anna', 'anna@example.com')
            RETURNING *
        `;
        const result = await pool.query(insertQuery);
        
        console.log('\nüîÑ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å–∫–∏–Ω—É—Ç–∞ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É');
        console.log(`   –î–æ–¥–∞–Ω–æ ${result.rows.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
        
        return result.rows;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error.message);
    }
}

// =====================================================
// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
// =====================================================

async function main() {
    console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë   PostgreSQL Homework - Node.js App   ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
    
    try {
        // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        await showAllUsers();
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
        await getUserNamesUpper();
        await findUsersWithA();
        await countByDomain();
        await getUsersOrdered();
        
        // –¢–µ—Å—Ç—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        await renameUserByEmail('bob@gmail.com', 'Robert');
        
        // –¢–µ—Å—Ç—É—î–º–æ –ø–æ–º–∏–ª–∫—É
        await renameUserByEmail('nonexistent@email.com', 'Test');
        
        // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ—Å–ª—è –∑–º—ñ–Ω
        await showAllUsers();
        
        console.log('\n‚ú® –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!');
        
    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    } finally {
        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
        await pool.end();
        console.log('\nüëã –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
if (require.main === module) {
    main();
}

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
    getUserNamesUpper,
    findUsersWithA,
    countByDomain,
    getUsersOrdered,
    renameUserByEmail,
    showAllUsers,
    resetDatabase
};
